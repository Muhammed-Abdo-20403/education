// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldChannelName holds the string denoting the channel_name field in the database.
	FieldChannelName = "channel_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldSpecialist holds the string denoting the specialist field in the database.
	FieldSpecialist = "specialist"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldShorBio holds the string denoting the shor_bio field in the database.
	FieldShorBio = "shor_bio"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUploads holds the string denoting the uploads edge name in mutations.
	EdgeUploads = "uploads"
	// Table holds the table name of the user in the database.
	Table = "users"
	// UploadsTable is the table that holds the uploads relation/edge.
	UploadsTable = "uploads"
	// UploadsInverseTable is the table name for the Upload entity.
	// It exists in this package in order to avoid circular dependency with the "upload" package.
	UploadsInverseTable = "uploads"
	// UploadsColumn is the table column denoting the uploads relation/edge.
	UploadsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldChannelName,
	FieldEmail,
	FieldSpecialist,
	FieldAge,
	FieldPhone,
	FieldLanguage,
	FieldCountry,
	FieldShorBio,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ChannelNameValidator is a validator for the "channel_name" field. It is called by the builders before save.
	ChannelNameValidator func(string) error
	// AgeValidator is a validator for the "age" field. It is called by the builders before save.
	AgeValidator func(int) error
	// ShorBioValidator is a validator for the "shor_bio" field. It is called by the builders before save.
	ShorBioValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
