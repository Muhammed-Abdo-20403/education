// Code generated by ent, DO NOT EDIT.

package ent

import (
	"education/ent/playlist"
	"education/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Playlist is the model entity for the Playlist schema.
type Playlist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaylistQuery when eager-loading is set.
	Edges PlaylistEdges `json:"edges"`
}

// PlaylistEdges holds the relations/edges for other nodes in the graph.
type PlaylistEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Uploads holds the value of the uploads edge.
	Uploads []*Upload `json:"uploads,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaylistEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// UploadsOrErr returns the Uploads value or an error if the edge
// was not loaded in eager-loading.
func (e PlaylistEdges) UploadsOrErr() ([]*Upload, error) {
	if e.loadedTypes[1] {
		return e.Uploads, nil
	}
	return nil, &NotLoadedError{edge: "uploads"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Playlist) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case playlist.FieldID, playlist.FieldUserID:
			values[i] = new(sql.NullInt64)
		case playlist.FieldTitle:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Playlist", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Playlist fields.
func (pl *Playlist) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playlist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int(value.Int64)
		case playlist.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pl.UserID = int(value.Int64)
			}
		case playlist.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pl.Title = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Playlist entity.
func (pl *Playlist) QueryUser() *UserQuery {
	return (&PlaylistClient{config: pl.config}).QueryUser(pl)
}

// QueryUploads queries the "uploads" edge of the Playlist entity.
func (pl *Playlist) QueryUploads() *UploadQuery {
	return (&PlaylistClient{config: pl.config}).QueryUploads(pl)
}

// Update returns a builder for updating this Playlist.
// Note that you need to call Playlist.Unwrap() before calling this method if this Playlist
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Playlist) Update() *PlaylistUpdateOne {
	return (&PlaylistClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the Playlist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Playlist) Unwrap() *Playlist {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Playlist is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Playlist) String() string {
	var builder strings.Builder
	builder.WriteString("Playlist(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.UserID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pl.Title)
	builder.WriteByte(')')
	return builder.String()
}

// Playlists is a parsable slice of Playlist.
type Playlists []*Playlist

func (pl Playlists) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
