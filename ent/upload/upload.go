// Code generated by ent, DO NOT EDIT.

package upload

import (
	"time"
)

const (
	// Label holds the string label denoting the upload type in the database.
	Label = "upload"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPlaylistID holds the string denoting the playlist_id field in the database.
	FieldPlaylistID = "playlist_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldUID holds the string denoting the uid field in the database.
	FieldUID = "uid"
	// FieldMimeType holds the string denoting the mime_type field in the database.
	FieldMimeType = "mime_type"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgePlaylist holds the string denoting the playlist edge name in mutations.
	EdgePlaylist = "playlist"
	// Table holds the table name of the upload in the database.
	Table = "uploads"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "uploads"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// PlaylistTable is the table that holds the playlist relation/edge.
	PlaylistTable = "uploads"
	// PlaylistInverseTable is the table name for the Playlist entity.
	// It exists in this package in order to avoid circular dependency with the "playlist" package.
	PlaylistInverseTable = "playlists"
	// PlaylistColumn is the table column denoting the playlist relation/edge.
	PlaylistColumn = "playlist_id"
)

// Columns holds all SQL columns for upload fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldPlaylistID,
	FieldName,
	FieldUID,
	FieldMimeType,
	FieldSize,
	FieldTitle,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
