// Code generated by ent, DO NOT EDIT.

package ent

import (
	"education/ent/playlist"
	"education/ent/upload"
	"education/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Upload is the model entity for the Upload schema.
type Upload struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// PlaylistID holds the value of the "playlist_id" field.
	PlaylistID int `json:"playlist_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// MimeType holds the value of the "mime_type" field.
	MimeType string `json:"mime_type,omitempty"`
	// Size holds the value of the "size" field.
	Size int `json:"size,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UploadQuery when eager-loading is set.
	Edges UploadEdges `json:"edges"`
}

// UploadEdges holds the relations/edges for other nodes in the graph.
type UploadEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Playlist holds the value of the playlist edge.
	Playlist *Playlist `json:"playlist,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UploadEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PlaylistOrErr returns the Playlist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UploadEdges) PlaylistOrErr() (*Playlist, error) {
	if e.loadedTypes[1] {
		if e.Playlist == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: playlist.Label}
		}
		return e.Playlist, nil
	}
	return nil, &NotLoadedError{edge: "playlist"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Upload) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case upload.FieldID, upload.FieldUserID, upload.FieldPlaylistID, upload.FieldSize:
			values[i] = new(sql.NullInt64)
		case upload.FieldName, upload.FieldUUID, upload.FieldMimeType, upload.FieldTitle, upload.FieldDescription:
			values[i] = new(sql.NullString)
		case upload.FieldCreatedAt, upload.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Upload", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Upload fields.
func (u *Upload) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upload.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case upload.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				u.UserID = int(value.Int64)
			}
		case upload.FieldPlaylistID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field playlist_id", values[i])
			} else if value.Valid {
				u.PlaylistID = int(value.Int64)
			}
		case upload.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case upload.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				u.UUID = value.String
			}
		case upload.FieldMimeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mime_type", values[i])
			} else if value.Valid {
				u.MimeType = value.String
			}
		case upload.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				u.Size = int(value.Int64)
			}
		case upload.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				u.Title = value.String
			}
		case upload.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				u.Description = value.String
			}
		case upload.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case upload.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Upload entity.
func (u *Upload) QueryUser() *UserQuery {
	return (&UploadClient{config: u.config}).QueryUser(u)
}

// QueryPlaylist queries the "playlist" edge of the Upload entity.
func (u *Upload) QueryPlaylist() *PlaylistQuery {
	return (&UploadClient{config: u.config}).QueryPlaylist(u)
}

// Update returns a builder for updating this Upload.
// Note that you need to call Upload.Unwrap() before calling this method if this Upload
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Upload) Update() *UploadUpdateOne {
	return (&UploadClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the Upload entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Upload) Unwrap() *Upload {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Upload is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Upload) String() string {
	var builder strings.Builder
	builder.WriteString("Upload(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", u.UserID))
	builder.WriteString(", ")
	builder.WriteString("playlist_id=")
	builder.WriteString(fmt.Sprintf("%v", u.PlaylistID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(u.UUID)
	builder.WriteString(", ")
	builder.WriteString("mime_type=")
	builder.WriteString(u.MimeType)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", u.Size))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(u.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(u.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Uploads is a parsable slice of Upload.
type Uploads []*Upload

func (u Uploads) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
